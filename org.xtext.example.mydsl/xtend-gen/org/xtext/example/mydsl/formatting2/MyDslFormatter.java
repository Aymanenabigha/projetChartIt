/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import graphe1.Colonne;
import graphe1.Donner;
import graphe1.Graphe;
import graphe1.Programme;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final Programme programme, @Extension final IFormattableDocument document) {
    EList<Donner> _donner = programme.getDonner();
    for (final Donner donner : _donner) {
      document.<Donner>format(donner);
    }
    EList<Colonne> _colonne = programme.getColonne();
    for (final Colonne colonne : _colonne) {
      document.<Colonne>format(colonne);
    }
    EList<Graphe> _graphe = programme.getGraphe();
    for (final Graphe graphe : _graphe) {
      document.<Graphe>format(graphe);
    }
  }
  
  public void format(final Object programme, final IFormattableDocument document) {
    if (programme instanceof XtextResource) {
      _format((XtextResource)programme, document);
      return;
    } else if (programme instanceof Programme) {
      _format((Programme)programme, document);
      return;
    } else if (programme instanceof EObject) {
      _format((EObject)programme, document);
      return;
    } else if (programme == null) {
      _format((Void)null, document);
      return;
    } else if (programme != null) {
      _format(programme, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(programme, document).toString());
    }
  }
}
