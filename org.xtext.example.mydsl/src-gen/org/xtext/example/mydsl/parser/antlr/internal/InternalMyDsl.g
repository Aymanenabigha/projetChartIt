/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Programme";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgramme
entryRuleProgramme returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgrammeRule()); }
	iv_ruleProgramme=ruleProgramme
	{ $current=$iv_ruleProgramme.current; }
	EOF;

// Rule Programme
ruleProgramme returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProgrammeAccess().getProgrammeAction_0(),
					$current);
			}
		)
		otherlv_1='P'
		{
			newLeafNode(otherlv_1, grammarAccess.getProgrammeAccess().getPKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgrammeAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgrammeAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgrammeRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getProgrammeAccess().getLeftCurlyBracketKeyword_4());
		}
		otherlv_5='donner'
		{
			newLeafNode(otherlv_5, grammarAccess.getProgrammeAccess().getDonnerKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getProgrammeAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgrammeAccess().getDonnerDonnerParserRuleCall_7_0());
				}
				lv_donner_7_0=ruleDonner
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgrammeRule());
					}
					add(
						$current,
						"donner",
						lv_donner_7_0,
						"org.xtext.example.mydsl.MyDsl.Donner");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getProgrammeAccess().getCommaKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgrammeAccess().getDonnerDonnerParserRuleCall_8_1_0());
					}
					lv_donner_9_0=ruleDonner
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgrammeRule());
						}
						add(
							$current,
							"donner",
							lv_donner_9_0,
							"org.xtext.example.mydsl.MyDsl.Donner");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getProgrammeAccess().getRightCurlyBracketKeyword_9());
		}
		otherlv_11='colonne'
		{
			newLeafNode(otherlv_11, grammarAccess.getProgrammeAccess().getColonneKeyword_10());
		}
		otherlv_12='{'
		{
			newLeafNode(otherlv_12, grammarAccess.getProgrammeAccess().getLeftCurlyBracketKeyword_11());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgrammeAccess().getColonneColonneParserRuleCall_12_0());
				}
				lv_colonne_13_0=ruleColonne
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgrammeRule());
					}
					add(
						$current,
						"colonne",
						lv_colonne_13_0,
						"org.xtext.example.mydsl.MyDsl.Colonne");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_14=','
			{
				newLeafNode(otherlv_14, grammarAccess.getProgrammeAccess().getCommaKeyword_13_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgrammeAccess().getColonneColonneParserRuleCall_13_1_0());
					}
					lv_colonne_15_0=ruleColonne
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgrammeRule());
						}
						add(
							$current,
							"colonne",
							lv_colonne_15_0,
							"org.xtext.example.mydsl.MyDsl.Colonne");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getProgrammeAccess().getRightCurlyBracketKeyword_14());
		}
		otherlv_17='graphe'
		{
			newLeafNode(otherlv_17, grammarAccess.getProgrammeAccess().getGrapheKeyword_15());
		}
		otherlv_18='{'
		{
			newLeafNode(otherlv_18, grammarAccess.getProgrammeAccess().getLeftCurlyBracketKeyword_16());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgrammeAccess().getGrapheGrapheParserRuleCall_17_0());
				}
				lv_graphe_19_0=ruleGraphe
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgrammeRule());
					}
					add(
						$current,
						"graphe",
						lv_graphe_19_0,
						"org.xtext.example.mydsl.MyDsl.Graphe");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_20=','
			{
				newLeafNode(otherlv_20, grammarAccess.getProgrammeAccess().getCommaKeyword_18_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgrammeAccess().getGrapheGrapheParserRuleCall_18_1_0());
					}
					lv_graphe_21_0=ruleGraphe
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgrammeRule());
						}
						add(
							$current,
							"graphe",
							lv_graphe_21_0,
							"org.xtext.example.mydsl.MyDsl.Graphe");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_22='}'
		{
			newLeafNode(otherlv_22, grammarAccess.getProgrammeAccess().getRightCurlyBracketKeyword_19());
		}
		otherlv_23='}'
		{
			newLeafNode(otherlv_23, grammarAccess.getProgrammeAccess().getRightCurlyBracketKeyword_20());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleGraphe
entryRuleGraphe returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGrapheRule()); }
	iv_ruleGraphe=ruleGraphe
	{ $current=$iv_ruleGraphe.current; }
	EOF;

// Rule Graphe
ruleGraphe returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGrapheAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGrapheRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getGrapheAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='data'
		{
			newLeafNode(otherlv_2, grammarAccess.getGrapheAccess().getDataKeyword_2());
		}
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getGrapheAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGrapheRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getGrapheAccess().getDataDonnerCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getGrapheAccess().getCommaKeyword_5());
		}
		otherlv_6='type'
		{
			newLeafNode(otherlv_6, grammarAccess.getGrapheAccess().getTypeKeyword_6());
		}
		otherlv_7='='
		{
			newLeafNode(otherlv_7, grammarAccess.getGrapheAccess().getEqualsSignKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGrapheAccess().getTypeTypeGrapheEnumRuleCall_8_0());
				}
				lv_type_8_0=ruleTypeGraphe
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGrapheRule());
					}
					set(
						$current,
						"type",
						lv_type_8_0,
						"org.xtext.example.mydsl.MyDsl.TypeGraphe");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=','
		{
			newLeafNode(otherlv_9, grammarAccess.getGrapheAccess().getCommaKeyword_9());
		}
		otherlv_10='colonne'
		{
			newLeafNode(otherlv_10, grammarAccess.getGrapheAccess().getColonneKeyword_10());
		}
		otherlv_11='='
		{
			newLeafNode(otherlv_11, grammarAccess.getGrapheAccess().getEqualsSignKeyword_11());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGrapheRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getGrapheAccess().getColonneColonneCrossReference_12_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_13=','
			{
				newLeafNode(otherlv_13, grammarAccess.getGrapheAccess().getCommaKeyword_13_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGrapheRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getGrapheAccess().getColonneColonneCrossReference_13_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_15=','
		{
			newLeafNode(otherlv_15, grammarAccess.getGrapheAccess().getCommaKeyword_14());
		}
		otherlv_16='bagColor'
		{
			newLeafNode(otherlv_16, grammarAccess.getGrapheAccess().getBagColorKeyword_15());
		}
		otherlv_17='='
		{
			newLeafNode(otherlv_17, grammarAccess.getGrapheAccess().getEqualsSignKeyword_16());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGrapheAccess().getBagColorCouleursEnumRuleCall_17_0());
				}
				lv_bagColor_18_0=ruleCouleurs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGrapheRule());
					}
					set(
						$current,
						"bagColor",
						lv_bagColor_18_0,
						"org.xtext.example.mydsl.MyDsl.Couleurs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_19='}'
		{
			newLeafNode(otherlv_19, grammarAccess.getGrapheAccess().getRightCurlyBracketKeyword_18());
		}
	)
;

// Entry rule entryRuleColonne
entryRuleColonne returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColonneRule()); }
	iv_ruleColonne=ruleColonne
	{ $current=$iv_ruleColonne.current; }
	EOF;

// Rule Colonne
ruleColonne returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getColonneAccess().getColonneAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColonneAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColonneRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getColonneAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='label'
		{
			newLeafNode(otherlv_3, grammarAccess.getColonneAccess().getLabelKeyword_3());
		}
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getColonneAccess().getEqualsSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColonneAccess().getLabelEStringParserRuleCall_5_0());
				}
				lv_label_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColonneRule());
					}
					set(
						$current,
						"label",
						lv_label_5_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getColonneAccess().getCommaKeyword_6());
		}
		otherlv_7='color'
		{
			newLeafNode(otherlv_7, grammarAccess.getColonneAccess().getColorKeyword_7());
		}
		otherlv_8='='
		{
			newLeafNode(otherlv_8, grammarAccess.getColonneAccess().getEqualsSignKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColonneAccess().getColorCouleursEnumRuleCall_9_0());
				}
				lv_color_9_0=ruleCouleurs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColonneRule());
					}
					set(
						$current,
						"color",
						lv_color_9_0,
						"org.xtext.example.mydsl.MyDsl.Couleurs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getColonneAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleDonner
entryRuleDonner returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDonnerRule()); }
	iv_ruleDonner=ruleDonner
	{ $current=$iv_ruleDonner.current; }
	EOF;

// Rule Donner
ruleDonner returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDonnerAccess().getDonnerAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDonnerAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDonnerRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getDonnerAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDonnerAccess().getLinkEStringParserRuleCall_3_0());
				}
				lv_link_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDonnerRule());
					}
					set(
						$current,
						"link",
						lv_link_3_0,
						"org.xtext.example.mydsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getDonnerAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Rule TypeGraphe
ruleTypeGraphe returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='line'
			{
				$current = grammarAccess.getTypeGrapheAccess().getLineEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeGrapheAccess().getLineEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='bar'
			{
				$current = grammarAccess.getTypeGrapheAccess().getBarEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeGrapheAccess().getBarEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='pie'
			{
				$current = grammarAccess.getTypeGrapheAccess().getPieEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeGrapheAccess().getPieEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Couleurs
ruleCouleurs returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='red'
			{
				$current = grammarAccess.getCouleursAccess().getRedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCouleursAccess().getRedEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='blue'
			{
				$current = grammarAccess.getCouleursAccess().getBlueEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCouleursAccess().getBlueEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='green'
			{
				$current = grammarAccess.getCouleursAccess().getGreenEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCouleursAccess().getGreenEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='pink'
			{
				$current = grammarAccess.getCouleursAccess().getPinkEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCouleursAccess().getPinkEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
