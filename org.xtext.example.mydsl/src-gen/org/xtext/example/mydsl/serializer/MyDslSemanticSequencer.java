/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import graphe1.Colonne;
import graphe1.Donner;
import graphe1.Graphe;
import graphe1.Graphe1Package;
import graphe1.Programme;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Graphe1Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Graphe1Package.COLONNE:
				sequence_Colonne(context, (Colonne) semanticObject); 
				return; 
			case Graphe1Package.DONNER:
				sequence_Donner(context, (Donner) semanticObject); 
				return; 
			case Graphe1Package.GRAPHE:
				sequence_Graphe(context, (Graphe) semanticObject); 
				return; 
			case Graphe1Package.PROGRAMME:
				sequence_Programme(context, (Programme) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Colonne returns Colonne
	 *
	 * Constraint:
	 *     (name=EString label=EString color=Couleurs)
	 */
	protected void sequence_Colonne(ISerializationContext context, Colonne semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Graphe1Package.Literals.NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Graphe1Package.Literals.NAME__NAME));
			if (transientValues.isValueTransient(semanticObject, Graphe1Package.Literals.COLONNE__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Graphe1Package.Literals.COLONNE__LABEL));
			if (transientValues.isValueTransient(semanticObject, Graphe1Package.Literals.COLONNE__COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Graphe1Package.Literals.COLONNE__COLOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColonneAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getColonneAccess().getLabelEStringParserRuleCall_5_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getColonneAccess().getColorCouleursEnumRuleCall_9_0(), semanticObject.getColor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Donner returns Donner
	 *
	 * Constraint:
	 *     (name=EString link=EString)
	 */
	protected void sequence_Donner(ISerializationContext context, Donner semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Graphe1Package.Literals.NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Graphe1Package.Literals.NAME__NAME));
			if (transientValues.isValueTransient(semanticObject, Graphe1Package.Literals.DONNER__LINK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Graphe1Package.Literals.DONNER__LINK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDonnerAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDonnerAccess().getLinkEStringParserRuleCall_3_0(), semanticObject.getLink());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Graphe returns Graphe
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         data=[Donner|EString] 
	 *         type=TypeGraphe 
	 *         colonne+=[Colonne|EString] 
	 *         colonne+=[Colonne|EString]* 
	 *         bagColor=Couleurs
	 *     )
	 */
	protected void sequence_Graphe(ISerializationContext context, Graphe semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Programme returns Programme
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         donner+=Donner+ 
	 *         donner+=Donner* 
	 *         colonne+=Colonne+ 
	 *         colonne+=Colonne* 
	 *         graphe+=Graphe+ 
	 *         graphe+=Graphe*
	 *     )
	 */
	protected void sequence_Programme(ISerializationContext context, Programme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
