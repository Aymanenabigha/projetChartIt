/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.generator;

import graphe1.Graphe;
import graphe1.Programme;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Programme programme = ((Programme) _head);
    String _name = programme.getName();
    String _plus = (_name + ".html");
    fsa.generateFile(_plus, this.generateHTMLCode(programme));
  }
  
  public String generateHTMLCode(final Programme programme) {
    String js = "";
    String grapheH = "";
    String data = "";
    EList<Graphe> _graphe = programme.getGraphe();
    for (final Graphe chart : _graphe) {
      {
        String _grapheH = grapheH;
        String _generateHTMLGraphe = this.generateHTMLGraphe(chart);
        grapheH = (_grapheH + _generateHTMLGraphe);
        String _js = js;
        String _generateGraphe = this.generateGraphe(chart);
        js = (_js + _generateGraphe);
        String _data = data;
        Object _generateData = this.generateData(chart);
        data = (_data + _generateData);
      }
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<title>ChartIt - ");
    String _name = programme.getName();
    String _plus = (_builder.toString() + _name);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("</title>");
    _builder_1.newLine();
    _builder_1.append("                    ");
    _builder_1.append("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("</head>");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append("<body>");
    _builder_1.newLine();
    _builder_1.append("                    ");
    _builder_1.append("<div style=\" display:flex;flex-direction:column;justify-content:center;align-items:center;overflow: auto;\">");
    _builder_1.newLine();
    String _plus_1 = (_plus + _builder_1);
    String _plus_2 = (_plus_1 + grapheH);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("</div>");
    _builder_2.newLine();
    _builder_2.append("<script>");
    _builder_2.newLine();
    String _plus_3 = (_plus_2 + _builder_2);
    String _plus_4 = (_plus_3 + data);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("                        ");
    _builder_3.newLine();
    String _plus_5 = (_plus_4 + _builder_3);
    String _plus_6 = (_plus_5 + js);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("        ");
    _builder_4.append("</script>");
    _builder_4.newLine();
    _builder_4.append("    ");
    _builder_4.append("</body>");
    _builder_4.newLine();
    _builder_4.append("</html>");
    _builder_4.newLine();
    return (_plus_6 + _builder_4);
  }
  
  public String generateHTMLGraphe(final Graphe graphe) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<canvas id=\"");
    String _name = graphe.getName();
    String _plus = (_builder.toString() + _name);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("\"></canvas>");
    _builder_1.newLine();
    return (_plus + _builder_1);
  }
  
  public String generateGraphe(final Graphe graphe) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method get(int) is undefined for the type Object"
      + "\nThe method or field label is undefined for the type Object"
      + "\nThe method or field name is undefined for the type Object"
      + "\nThe method or field couleurs is undefined for the type Object"
      + "\nThe method get(int) is undefined for the type Object"
      + "\nType mismatch: cannot convert from Object to Iterable<?>"
      + "\nname cannot be resolved");
  }
  
  public Object generateData(final Graphe graphe) {
    return null;
  }
}
