/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.generator

import java.io.*;
import java.util.Scanner;
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.ArrayList
import graphe1.Programme
import graphe1.Graphe


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 class LireCSV {
    def static csvReader(String filePath){
        val data=new ArrayList
        val fichier=new File(filePath)
        val scane = new Scanner(fichier)
        scane.useDelimiter(";")
        while(scane.hasNextLine){
            val line=scane.nextLine
            val values=line.split(";")
            var row=new ArrayList
            
            for(v:values){
                row.add(v)
            }
            data.add(row)
        }
        scane.close
        return data
    }
}
class MyDslGenerator extends AbstractGenerator {


    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        val programme= resource.contents.head as Programme 
        fsa.generateFile(programme.name+".html",generateHTMLCode(programme))
    }
	
	def generateHTMLCode(Programme programme) {
		var js = ""
        var grapheH = ""
        var data = ""
        for (chart : programme.graphe) {
            grapheH += generateHTMLGraphe(chart)
            js += generateGraphe(chart)
            data+=generateData(chart)
        }
        return '''
            <!DOCTYPE html>
            <html>
                <head>
                    <title>ChartIt - ''' + programme.name + '''</title>
                    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                </head>
                <body>
                    <div style=" display:flex;flex-direction:column;justify-content:center;align-items:center;overflow: auto;">
                        ''' + grapheH + '''
                    </div>
                    <script>
                        '''+ data +'''
                        
                        '''+ js +'''
                    </script>
                </body>
            </html>
        '''
	}
	

	
    def String generateHTMLGraphe(Graphe graphe){ 
        return '''
            <canvas id="''' + graphe.name + '''"></canvas>
        '''
    }
        def String generateGraphe(Graphe graphe) {
        var dataset=""
        for(couleurs:graphe.couleurs){
        	if(!(couleurs==graphe.couleurs.get(0))){
        		dataset+=
	        	'''
	        	{
	        		label: "'''+ couleurs.label +'''",
		       		data: '''+ graphe.data.name +'''.map(row => row.'''+ couleurs.name +'''),
					fill: true,
					backgroundColor: "'''+ (couleurs.couleurs) +'''",
	        	},
	        	'''
        	}
        	
        }
        return '''
            new Chart(
                document.getElementById("'''+ graphe.name +'''"),
                {
                    type:"'''+ graphe.type.toString().toLowerCase() +'''",
                    data: {
                        labels: '''+ graphe.data.name +'''.map(row => row.'''+ graphe.couleurs.get(0).name +'''),
                        datasets: [
                            '''+ dataset +'''
                        ]
                    },
                }
            );
        '''
    }
	
	def generateData(Graphe graphe) {
		
	}
	
 }

