/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgrammeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Programme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgrammeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDonnerKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDonnerAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDonnerDonnerParserRuleCall_7_0 = (RuleCall)cDonnerAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDonnerAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDonnerDonnerParserRuleCall_8_1_0 = (RuleCall)cDonnerAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonneKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cColonneAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cColonneColonneParserRuleCall_12_0 = (RuleCall)cColonneAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cColonneAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cColonneColonneParserRuleCall_13_1_0 = (RuleCall)cColonneAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cGrapheKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cLeftCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cGrapheAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cGrapheGrapheParserRuleCall_17_0 = (RuleCall)cGrapheAssignment_17.eContents().get(0);
		private final Group cGroup_18 = (Group)cGroup.eContents().get(18);
		private final Keyword cCommaKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final Assignment cGrapheAssignment_18_1 = (Assignment)cGroup_18.eContents().get(1);
		private final RuleCall cGrapheGrapheParserRuleCall_18_1_0 = (RuleCall)cGrapheAssignment_18_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cRightCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//Programme returns Programme:
		//    {Programme}
		//    'P' ':' name=EString
		//    '{'
		//        'donner' '{' donner+=Donner +( "," donner+=Donner)* '}'
		//        'colonne' '{' colonne+=Colonne +( "," colonne+=Colonne)* '}'
		//        'graphe' '{' graphe+=Graphe +( "," graphe+=Graphe)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Programme}
		//'P' ':' name=EString
		//'{'
		//    'donner' '{' donner+=Donner +( "," donner+=Donner)* '}'
		//    'colonne' '{' colonne+=Colonne +( "," colonne+=Colonne)* '}'
		//    'graphe' '{' graphe+=Graphe +( "," graphe+=Graphe)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Programme}
		public Action getProgrammeAction_0() { return cProgrammeAction_0; }
		
		//'P'
		public Keyword getPKeyword_1() { return cPKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'donner'
		public Keyword getDonnerKeyword_5() { return cDonnerKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//donner+=Donner +
		public Assignment getDonnerAssignment_7() { return cDonnerAssignment_7; }
		
		//Donner
		public RuleCall getDonnerDonnerParserRuleCall_7_0() { return cDonnerDonnerParserRuleCall_7_0; }
		
		//( "," donner+=Donner)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//donner+=Donner
		public Assignment getDonnerAssignment_8_1() { return cDonnerAssignment_8_1; }
		
		//Donner
		public RuleCall getDonnerDonnerParserRuleCall_8_1_0() { return cDonnerDonnerParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'colonne'
		public Keyword getColonneKeyword_10() { return cColonneKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//colonne+=Colonne +
		public Assignment getColonneAssignment_12() { return cColonneAssignment_12; }
		
		//Colonne
		public RuleCall getColonneColonneParserRuleCall_12_0() { return cColonneColonneParserRuleCall_12_0; }
		
		//( "," colonne+=Colonne)*
		public Group getGroup_13() { return cGroup_13; }
		
		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//colonne+=Colonne
		public Assignment getColonneAssignment_13_1() { return cColonneAssignment_13_1; }
		
		//Colonne
		public RuleCall getColonneColonneParserRuleCall_13_1_0() { return cColonneColonneParserRuleCall_13_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
		
		//'graphe'
		public Keyword getGrapheKeyword_15() { return cGrapheKeyword_15; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_16() { return cLeftCurlyBracketKeyword_16; }
		
		//graphe+=Graphe +
		public Assignment getGrapheAssignment_17() { return cGrapheAssignment_17; }
		
		//Graphe
		public RuleCall getGrapheGrapheParserRuleCall_17_0() { return cGrapheGrapheParserRuleCall_17_0; }
		
		//( "," graphe+=Graphe)*
		public Group getGroup_18() { return cGroup_18; }
		
		//","
		public Keyword getCommaKeyword_18_0() { return cCommaKeyword_18_0; }
		
		//graphe+=Graphe
		public Assignment getGrapheAssignment_18_1() { return cGrapheAssignment_18_1; }
		
		//Graphe
		public RuleCall getGrapheGrapheParserRuleCall_18_1_0() { return cGrapheGrapheParserRuleCall_18_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_19() { return cRightCurlyBracketKeyword_19; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_20() { return cRightCurlyBracketKeyword_20; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class GrapheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Graphe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDataKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDataDonnerCrossReference_4_0 = (CrossReference)cDataAssignment_4.eContents().get(0);
		private final RuleCall cDataDonnerEStringParserRuleCall_4_0_1 = (RuleCall)cDataDonnerCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypeTypeGrapheEnumRuleCall_8_0 = (RuleCall)cTypeAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonneKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cColonneAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cColonneColonneCrossReference_12_0 = (CrossReference)cColonneAssignment_12.eContents().get(0);
		private final RuleCall cColonneColonneEStringParserRuleCall_12_0_1 = (RuleCall)cColonneColonneCrossReference_12_0.eContents().get(1);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cColonneAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final CrossReference cColonneColonneCrossReference_13_1_0 = (CrossReference)cColonneAssignment_13_1.eContents().get(0);
		private final RuleCall cColonneColonneEStringParserRuleCall_13_1_0_1 = (RuleCall)cColonneColonneCrossReference_13_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cBagColorKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cEqualsSignKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cBagColorAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cBagColorCouleursEnumRuleCall_17_0 = (RuleCall)cBagColorAssignment_17.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//Graphe returns Graphe:
		//    name=EString
		//    '{' 'data' '=' data=[Donner|EString] ',' 'type' '=' type=TypeGraphe ',' 'colonne' '=' colonne+=[Colonne|EString] ( "," colonne+=[Colonne|EString])* ',' 'bagColor''=' bagColor=Couleurs    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'{' 'data' '=' data=[Donner|EString] ',' 'type' '=' type=TypeGraphe ',' 'colonne' '=' colonne+=[Colonne|EString] ( "," colonne+=[Colonne|EString])* ',' 'bagColor''=' bagColor=Couleurs    '}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'data'
		public Keyword getDataKeyword_2() { return cDataKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//data=[Donner|EString]
		public Assignment getDataAssignment_4() { return cDataAssignment_4; }
		
		//[Donner|EString]
		public CrossReference getDataDonnerCrossReference_4_0() { return cDataDonnerCrossReference_4_0; }
		
		//EString
		public RuleCall getDataDonnerEStringParserRuleCall_4_0_1() { return cDataDonnerEStringParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'type'
		public Keyword getTypeKeyword_6() { return cTypeKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//type=TypeGraphe
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }
		
		//TypeGraphe
		public RuleCall getTypeTypeGrapheEnumRuleCall_8_0() { return cTypeTypeGrapheEnumRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'colonne'
		public Keyword getColonneKeyword_10() { return cColonneKeyword_10; }
		
		//'='
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }
		
		//colonne+=[Colonne|EString]
		public Assignment getColonneAssignment_12() { return cColonneAssignment_12; }
		
		//[Colonne|EString]
		public CrossReference getColonneColonneCrossReference_12_0() { return cColonneColonneCrossReference_12_0; }
		
		//EString
		public RuleCall getColonneColonneEStringParserRuleCall_12_0_1() { return cColonneColonneEStringParserRuleCall_12_0_1; }
		
		//( "," colonne+=[Colonne|EString])*
		public Group getGroup_13() { return cGroup_13; }
		
		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//colonne+=[Colonne|EString]
		public Assignment getColonneAssignment_13_1() { return cColonneAssignment_13_1; }
		
		//[Colonne|EString]
		public CrossReference getColonneColonneCrossReference_13_1_0() { return cColonneColonneCrossReference_13_1_0; }
		
		//EString
		public RuleCall getColonneColonneEStringParserRuleCall_13_1_0_1() { return cColonneColonneEStringParserRuleCall_13_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }
		
		//'bagColor'
		public Keyword getBagColorKeyword_15() { return cBagColorKeyword_15; }
		
		//'='
		public Keyword getEqualsSignKeyword_16() { return cEqualsSignKeyword_16; }
		
		//bagColor=Couleurs
		public Assignment getBagColorAssignment_17() { return cBagColorAssignment_17; }
		
		//Couleurs
		public RuleCall getBagColorCouleursEnumRuleCall_17_0() { return cBagColorCouleursEnumRuleCall_17_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
	}
	public class ColonneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Colonne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColonneAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelEStringParserRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColorKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cColorAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cColorCouleursEnumRuleCall_9_0 = (RuleCall)cColorAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Colonne returns Colonne:
		//    {Colonne}
		//    name=EString '{' 'label' '=' label=EString ',' 'color' '=' color=Couleurs '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Colonne}
		//name=EString '{' 'label' '=' label=EString ',' 'color' '=' color=Couleurs '}'
		public Group getGroup() { return cGroup; }
		
		//{Colonne}
		public Action getColonneAction_0() { return cColonneAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'label'
		public Keyword getLabelKeyword_3() { return cLabelKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//label=EString
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_5_0() { return cLabelEStringParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'color'
		public Keyword getColorKeyword_7() { return cColorKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//color=Couleurs
		public Assignment getColorAssignment_9() { return cColorAssignment_9; }
		
		//Couleurs
		public RuleCall getColorCouleursEnumRuleCall_9_0() { return cColorCouleursEnumRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class DonnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Donner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDonnerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinkAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinkEStringParserRuleCall_3_0 = (RuleCall)cLinkAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Donner returns Donner:
		//    {Donner}
		//    name=EString '(' link=EString ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Donner}
		//name=EString '(' link=EString ')'
		public Group getGroup() { return cGroup; }
		
		//{Donner}
		public Action getDonnerAction_0() { return cDonnerAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//link=EString
		public Assignment getLinkAssignment_3() { return cLinkAssignment_3; }
		
		//EString
		public RuleCall getLinkEStringParserRuleCall_3_0() { return cLinkEStringParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	public class TypeGrapheElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeGraphe");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLineEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLineLineKeyword_0_0 = (Keyword)cLineEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBarEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBarBarKeyword_1_0 = (Keyword)cBarEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPieEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPiePieKeyword_2_0 = (Keyword)cPieEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TypeGraphe returns TypeGraphe:
		//                line = 'line' | bar = 'bar' | pie = 'pie';
		public EnumRule getRule() { return rule; }
		
		//line = 'line' | bar = 'bar' | pie = 'pie'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//line = 'line'
		public EnumLiteralDeclaration getLineEnumLiteralDeclaration_0() { return cLineEnumLiteralDeclaration_0; }
		
		//'line'
		public Keyword getLineLineKeyword_0_0() { return cLineLineKeyword_0_0; }
		
		//bar = 'bar'
		public EnumLiteralDeclaration getBarEnumLiteralDeclaration_1() { return cBarEnumLiteralDeclaration_1; }
		
		//'bar'
		public Keyword getBarBarKeyword_1_0() { return cBarBarKeyword_1_0; }
		
		//pie = 'pie'
		public EnumLiteralDeclaration getPieEnumLiteralDeclaration_2() { return cPieEnumLiteralDeclaration_2; }
		
		//'pie'
		public Keyword getPiePieKeyword_2_0() { return cPiePieKeyword_2_0; }
	}
	public class CouleursElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Couleurs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRedRedKeyword_0_0 = (Keyword)cRedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBlueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBlueBlueKeyword_1_0 = (Keyword)cBlueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreenEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreenGreenKeyword_2_0 = (Keyword)cGreenEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPinkEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPinkPinkKeyword_3_0 = (Keyword)cPinkEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Couleurs returns Couleurs:
		//                red = 'red' | blue = 'blue' | green = 'green' | pink = 'pink';
		public EnumRule getRule() { return rule; }
		
		//red = 'red' | blue = 'blue' | green = 'green' | pink = 'pink'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//red = 'red'
		public EnumLiteralDeclaration getRedEnumLiteralDeclaration_0() { return cRedEnumLiteralDeclaration_0; }
		
		//'red'
		public Keyword getRedRedKeyword_0_0() { return cRedRedKeyword_0_0; }
		
		//blue = 'blue'
		public EnumLiteralDeclaration getBlueEnumLiteralDeclaration_1() { return cBlueEnumLiteralDeclaration_1; }
		
		//'blue'
		public Keyword getBlueBlueKeyword_1_0() { return cBlueBlueKeyword_1_0; }
		
		//green = 'green'
		public EnumLiteralDeclaration getGreenEnumLiteralDeclaration_2() { return cGreenEnumLiteralDeclaration_2; }
		
		//'green'
		public Keyword getGreenGreenKeyword_2_0() { return cGreenGreenKeyword_2_0; }
		
		//pink = 'pink'
		public EnumLiteralDeclaration getPinkEnumLiteralDeclaration_3() { return cPinkEnumLiteralDeclaration_3; }
		
		//'pink'
		public Keyword getPinkPinkKeyword_3_0() { return cPinkPinkKeyword_3_0; }
	}
	
	private final ProgrammeElements pProgramme;
	private final EStringElements pEString;
	private final GrapheElements pGraphe;
	private final ColonneElements pColonne;
	private final DonnerElements pDonner;
	private final TypeGrapheElements eTypeGraphe;
	private final CouleursElements eCouleurs;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgramme = new ProgrammeElements();
		this.pEString = new EStringElements();
		this.pGraphe = new GrapheElements();
		this.pColonne = new ColonneElements();
		this.pDonner = new DonnerElements();
		this.eTypeGraphe = new TypeGrapheElements();
		this.eCouleurs = new CouleursElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programme returns Programme:
	//    {Programme}
	//    'P' ':' name=EString
	//    '{'
	//        'donner' '{' donner+=Donner +( "," donner+=Donner)* '}'
	//        'colonne' '{' colonne+=Colonne +( "," colonne+=Colonne)* '}'
	//        'graphe' '{' graphe+=Graphe +( "," graphe+=Graphe)* '}'
	//    '}';
	public ProgrammeElements getProgrammeAccess() {
		return pProgramme;
	}
	
	public ParserRule getProgrammeRule() {
		return getProgrammeAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Graphe returns Graphe:
	//    name=EString
	//    '{' 'data' '=' data=[Donner|EString] ',' 'type' '=' type=TypeGraphe ',' 'colonne' '=' colonne+=[Colonne|EString] ( "," colonne+=[Colonne|EString])* ',' 'bagColor''=' bagColor=Couleurs    '}';
	public GrapheElements getGrapheAccess() {
		return pGraphe;
	}
	
	public ParserRule getGrapheRule() {
		return getGrapheAccess().getRule();
	}
	
	//Colonne returns Colonne:
	//    {Colonne}
	//    name=EString '{' 'label' '=' label=EString ',' 'color' '=' color=Couleurs '}';
	public ColonneElements getColonneAccess() {
		return pColonne;
	}
	
	public ParserRule getColonneRule() {
		return getColonneAccess().getRule();
	}
	
	//Donner returns Donner:
	//    {Donner}
	//    name=EString '(' link=EString ')';
	public DonnerElements getDonnerAccess() {
		return pDonner;
	}
	
	public ParserRule getDonnerRule() {
		return getDonnerAccess().getRule();
	}
	
	//enum TypeGraphe returns TypeGraphe:
	//                line = 'line' | bar = 'bar' | pie = 'pie';
	public TypeGrapheElements getTypeGrapheAccess() {
		return eTypeGraphe;
	}
	
	public EnumRule getTypeGrapheRule() {
		return getTypeGrapheAccess().getRule();
	}
	
	//enum Couleurs returns Couleurs:
	//                red = 'red' | blue = 'blue' | green = 'green' | pink = 'pink';
	public CouleursElements getCouleursAccess() {
		return eCouleurs;
	}
	
	public EnumRule getCouleursRule() {
		return getCouleursAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
